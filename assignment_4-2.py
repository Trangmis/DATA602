# -*- coding: utf-8 -*-
"""Assignment_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M66fRZD86JPFGd_ZHCZgLm6knV-MRQsV

```
DATA 602 - Assignment 4 - Trang Do

# BankAccount class declaration
```
"""

import numpy as np

class BankAccount:
  def __init__(self, bank, owner, balance = 0):
    self.balance = balance
    self.bankname = bank
    self.ownername = owner
    
  def __str__(self):
    result = 'Bank : ' + self.bankname + '\n' + 'Name : ' + self.ownername + '\n' + 'Balance : ' + str(self.balance)
    return result
    

  def deposit(self, depositamount):
    if depositamount > 0.0:
      self.balance = self.balance + depositamount
    else:
      print('Invalid deposit amount')

  def withdrawal(self, withdrawamount):
    if self.balance - withdrawamount > 0  :
      self.balance = self.balance - withdrawamount
    else:
      print('Insufficient balance to withdraw')

"""Test BankAccount class"""

bankaccount1 = BankAccount('BOA','Owner 1')
bankaccount1.deposit(1000)
print(bankaccount1)
bankaccount1.withdrawal(1500)
bankaccount1.deposit(1000)
bankaccount1.withdrawal(1500)
print(bankaccount1)

bankaccount2 = BankAccount('BOA','Owner 2')
bankaccount2.deposit(1000)
print(bankaccount2)
bankaccount2.withdrawal(300)
print(bankaccount2)
bankaccount2.deposit(1000)
bankaccount2.withdrawal(1500)
print(bankaccount2)

"""```
# class box declaration
```
"""

class Box:
  def __init__(self,length , width):
    if length > 0:
      self.length = length
    else:
      print('Invalid length')

    if width > 0:
      self.width = width
    else:
      print('Invalid width')

  def render(self):
    for x in range(self.width-1):
      print('*' * self.length)

  def invert(self):
    temp = self.width
    self.width = self.length
    self.length = temp

  def get_area(self):
    return (self.length*self.width)

  def get_perimeter(self):
    return (self.length*self.width)*2

  def double(self):
    self.length = self.length * 2
    self.width = self.width * 2
    return (self.length, self.width)  

  def __eq__(self,otherbox):
    if np.logical_and(self.length == otherbox.length, self.width == otherbox.width):
      return True
    else:
      return False  

  def print_dim(self):
    print('Length :', self.length,', ','Width :', self.width,'\n')

  def get_dim(self):  
    return (self.length,self.width)

  def combine(self, otherbox):
    self.length = self.length + otherbox.length  
    self.width = self.width + otherbox.width

  def get_hypot(self):
    return np.sqrt(self.length**2 + self.width**2)

"""Test class Box"""

box1 = Box(5,10)
box1.print_dim()

box2 = Box(3,4)
box2.print_dim()

box3 = Box(5,10)
box3.print_dim()

print(box1 == box2)
print(box1 == box3)

box1.combine(box3)
box1.print_dim()

box2.double()
box2.print_dim()

box1.combine(box2)
box1.print_dim()